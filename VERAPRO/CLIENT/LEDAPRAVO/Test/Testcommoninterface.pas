unit Testcommoninterface;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, rtcDataSrv, Windows, System.TypInfo, rtti, Classes, rtcConn, SysUtils,
  commoninterface, rtcHttpSrv, rtcInfo, rtcHttpCli, Unit1, Dialogs, ServerDocSqlManager;

type
  // Test methods for class TUtils

  TTestCalss = class(TObject)
  private
    FText: String;
    FState: Boolean;
    procedure SetState(const Value: Boolean);
    procedure SetText(const Value: String);
  public
     property Text: String read FText write SetText;
     property State: Boolean read FState write SetState;
     constructor Create;
  end;

  TestTUtils = class(TTestCase)
  strict private
    FUtils: TUtils;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCloneComponent;
    procedure TestObjectToRtcValue;
  end;

implementation

procedure TestTUtils.SetUp;
begin
  FUtils := TUtils.Create;
end;

procedure TestTUtils.TearDown;
begin
  FUtils.Free;
  FUtils := nil;
end;

procedure TestTUtils.TestCloneComponent;
var
  aDestination: TComponent;
  aSource: TComponent;
begin
  // TODO: Setup method call parameters
  //FUtils.CloneComponent(aSource, aDestination);
  // TODO: Validate method results
end;

procedure TestTUtils.TestObjectToRtcValue;

var
  ARecord: TRtcRecord;
  AObject: TObject;
  tobj: TTestCalss;
  man, man2: TServerDocSqlManager;
begin
  // TODO: Setup method call parameters
  ARecord := TRtcRecord.Create;
  tobj := TTestCalss.Create;
  tobj.Text := 'Test';
  tobj.State := True;
  man := TServerDocSqlManager.Create;
  man.TableName := 'CLIENT';
  man.SelectSQL.Text := 'SELECT * FROM client';
  man2 := TServerDocSqlManager.Create;

  try
     FUtils.ObjectToRtcValue(man, ARecord);
     ShowMessage(ARecord.toJSON);
     FUtils.RtcValueToObject(ARecord, TObject(man2));
     ShowMessage(man2.SelectSQL.Text);
  finally
    ARecord.Free;
  end;
  // TODO: Validate method results
end;

{ TTestCalss }

constructor TTestCalss.Create;
begin

end;

procedure TTestCalss.SetState(const Value: Boolean);
begin
  FState := Value;
end;

procedure TTestCalss.SetText(const Value: String);
begin
  FText := Value;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTUtils.Suite);
end.

